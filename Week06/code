1.迷宫
递归
class Solution:
	def minPathSum(self, grid) -> int:
		dirction = [[1,0],[0,1]]
		m = len(grid)
		n = len(grid[0])
		self.minsum = 100000000
		def dfs(i,j,tempsum):
			if i==m-1 and j==n-1:
				self.minsum = min(self.minsum,tempsum)
			for h in range(2):
				if i+dirction[h][0]<m and j+dirction[h][1]<n :
					a = i+dirction[h][0]
					b = j+dirction[h][1]
					tempsum1 = tempsum + grid[a][b]
					dfs(a,b,tempsum1)
		dfs(0,0,grid[0][0])
		return self.minsum
动态规划
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        if(not grid):
            return 0
        m=len(grid)
        n=len(grid[0])
        for i in range(1,n):
            grid[0][i]+=grid[0][i-1]
        for j in range(1,m):
            grid[j][0]+=grid[j-1][0]
        for x in range(1,m):
            for y in range(1,n):
                grid[x][y]+=min(grid[x-1][y],grid[x][y-1])
        return grid[-1][-1]
2.解码方法
class Solution:
    def numDecodings(self, s: str) -> int:
        if s[0] == '0':
            return 0
        if len(s) == 1:
            return 1
        dp = [1]
        for i in range(1, len(s)):
            if s[i] == '0':
                if s[i-1] != '1' and s[i-1] != '2':
                    return 0
                else:
                    if i == 1:
                        dp.append(1)
                    else:
                        dp.append(dp[i-2])
                    continue
            if s[i-1] == '1':
                dp.append(dp[i-2]+dp[i-1])
            elif s[i-1] == '2' and (s[i] >= '1' and s[i] <= '6'):
                dp.append(dp[i-1]+dp[i-2])
            else:
                dp.append(dp[i-1])

        return dp[-1]
思路：顺序遍历，计算字符串从开始位到当前位的解码方式总数，按照与字符串索引对应的位置存入dp数组

如果第一个元素等于'0'，直接返回0
如果元素长度等于1，直接返回1
定义dp数组为[1]，然后从字符串s的第二个字母开始遍历
如果第i个元素是‘0’，检查第i-1个元素是不是‘1’或‘2’，如果不是，返回0；如果是，判断一下i是否等于1，来决定dp.append(dp[i-2])或者是dp.append(1) (防止数组越界)
如果第i-1个元素是‘1’，或者第i-1个元素是‘2’且第i个原始大于‘0’且小于‘7’：dp.append(dp[i-2]+dp[i-1])
其余情况dp.append(dp[i-1])
返回s最后一个元素对应的dp值
3.最长有效括号
class Solution(object):
    def longestValidParentheses(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s: return 0
        stack = [-1]
        max_long = 0
        _max = 0
        for idx, i in enumerate(s):
            if i == "(":
                stack.append(idx)
            else:
                stack.pop(-1)
                if not stack:
                    stack.append(idx)
                else:
                    if len(stack)==1:
                        _max = idx - stack[0]
                    else:
                        _max = idx - stack[-1]
                    max_long = max(max_long, _max)
        return max_long
 4.编辑距离
 class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        if len(word2) == 0:
            return len(word1)
        elif len(word1) == 0:
            return len(word2)
        m = [ [0 for i in range(len(word2))] for j in range(len(word1))]
        p = 0
        for j in range(len(word2)): #初始化第0行
            if word1[0] == word2[j]:
                p = 1
            m[0][j] = j + 1 - p
        p = 0
        for i in range(0, len(word1)): #初始化第0列
            if word1[i] == word2[0]:
                p = 1
            m[i][0] = i + 1 - p

        for i in range(1, len(word1)):
            for j in range(1, len(word2)):
                if word1[i] == word2[j]:
                    m[i][j] = m[i - 1][j - 1]
                else:
                    m[i][j] = min(m[i - 1][j - 1], m[i - 1][j], m[i][j - 1]) + 1
        return m[-1][-1]
